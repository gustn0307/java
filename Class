- 클래스의 구성요소

1. 멤버변수
클래스 속성을 정의하는 클래스의 멤버, 앞에는 데이터 타입을 반드시 명시

2. 메소드
클래스가 가지는 데이터를 조작하고 변환하는 클래스의 멤버, 메소드명 앞에는 반환되는 데이터 타입을
반드시 명시하고 반환 데이터가 없는 경우에는 void

3. 생성자
클래스의 이름과 이름이 같은 메소드로 클래스로부터 객체를 생성할때 초기화하는 용도로 사용

4. 중첩클래스
클래스 안에 정의된 클래스를 중첩클래스라고 한다. 중첩클래스는 바깥 클래스의 멤버이므로
private, protected, public, package-private 모두 가능하다

- 멤버메소드 오버로딩
메소드의 이름은 동일하게 지정하고 매개변수의 유형과 개수를 변경하여 여러 개의 메소드를
하나의 메소드처럼 정의하는 기법(비슷한 유형의 메소드 들이 여러 개 필요할 때 서로 다른 
메소드들을 마치 하나의 메소드처럼 사용할 수 있음)

- 생성자 오버로딩
다양한 방법으로 멤버변수의 값을 초기화할 수 있도록 함. 생성자도 하나의 메소드이기 때문에
메소드 오버로딩과 형식은 동일함

- 상속
한 클래스가 다른 클래스에서 정의된 속성(변수, 메소드)를 이어받아 그대로 사용하거나
이를 바탕으로 필요한 기능을 추가하여 정의할 수 있다

상속을 통해 중복된 코드를 줄일 수 있고, 유지보수가 편리하며 통일성이 있고 다형성을 구현가능

상속을 받을 자식 클래스 뒤에 extends 키워드를 사용하고 부모클래스를 적어주면 상속의 선언

자식클래스가 여러 부모로부터 다중 상속을 받는것은 불가능. but 부모클래스는 여러 개의 자식클래스에게
상속이 가능하다

- 메소드 오버라이드
상속 관계에 있는 부모 클래스에서 이미 정의된 메소드를 자식 클래스에서 다시 정의하는 것
메소드의 선언부는 기존 메소드와 동일해야 하고
부모클래스의 메소드보다 접근 제어자를 더 좁은 범위로 변경할 수 없다

- 인터페이스 구성요소
1. 상수 필드
public static final이 자동으로 선언되어 상수로 만듬
이름은 모두 대문자로 구성됨

2. 추상 메소드
인터페이스 변수로 호출된 메소드는 최종적으로 구현 객체에서 실행됨
그래서 실체는 인터페이스에 없고 구현 클래스에 있음
추상 메소드는 리턴 타입, 메소드 이름, 매개변수가 기술되어 있는 클래스 설계 메소드
public abstract는 명시적으로 선언하지 않아도 자동으로 선언됨

3. 디폴트 메소드
클래스의 인스턴스 메소드와 동일, 다만 인터페이스에서 선언할때 리턴 타입 앞에 default 키워드가 붙음
나중에 인터페이스를 구혀난 구현클래스에 인스턴스 메소드로 추가됨
오버라이드를 통해 구현 클래스에서 재정의된 인스턴스 메소드로 사용가능

4. 정적 메소드
클래스의 정적메소드와 선언형식 동일, 같은 방식으로 사용가능

- 인터페이스 특징
클래스는 오직 하나의 부모를 가질 수 있지만(다중 상속 불가) 인터페이스는 여러 개를 가질 수 있다(다중 구현 가능)
implements 키워드를 사용한다.
생성자를 가지지 않으며 인터페이스가 가지는 메소드는 모두 public 접근 지정자이다.
인터페이스를 구현하는 클래스의 경우 인터페이스의 모든 메소드를 구현해야 한다.

OOP의 4대 개념

1. 캡슐화
특정 객체가 독립적으로 역할을 제대로 수행하기 위해 필요한 데이터와 기능을 하나로 묶은 것(모듈화)
정보를 객체안에 포함시키고, 그 정보에 대한 직접 접근은 허용하지 않는 대신 필요에 따라 확인할 수 있는
인터페이스를 외부에 공개하는 방식

2. 상속성
상위 클래스의 특징을 하위 클래스가 물려받는 것

3. 추상화
객체들의 공통적인 특징(속성, 기능)을 뽑아 이름을 붙이는 것

4. 다형성
하나의 개체가 여러 형태로 변화하는 것을 의미(오버라이딩을 통해 가능)
다형성을 극대화 하기 위해 추상클래스나 인터페이스를 이용한다.
